#!/usr/bin/env node

require('make-promises-safe');
const { Buffer } = require('buffer');
const argv = require('minimist')(process.argv.slice(2));
const concat = require('concat-stream');
const explain = require('explain-error');
const announce = require('u-wave-announce');
const ytSource = require('../../u-wave-source-youtube');
const scSource = require('u-wave-source-soundcloud');
const recaptchaTestKeys = require('recaptcha-test-keys');
const pino = require('pino');
const dotenv = require('dotenv');

dotenv.config();

const logger = pino({ level: 'trace' });

const testTransport = {
  name: 'test',
  version: '0.0.0',
  send(mail, callback) {
    mail.message.createReadStream().pipe(concat((message) => {
      logger.info('send test email', { to: mail.message.getEnvelope().to, contents: message.toString('utf8') });
      callback(null, {
        envelope: mail.message.getEnvelope(),
        messageId: mail.message.messageId(),
      });
    }));
  },
};

/**
 * Ã¼Wave API development server.
 */
async function start() {
  const port = Number(argv.port ?? process.env.PORT ?? 6042);

  const uwave = require('..');

  const secret = Buffer.from('none', 'utf8');

  const uw = uwave({
    port,
    redis: process.env.REDIS_URL,
    mongo: process.env.MONGODB_URL ?? 'mongodb://localhost/uwave',
    logger,
    secret,
    mailTransport: testTransport,
    timeout: 10,
  });

  uw.use(async function configureExpress(uw) {
    uw.express.set('json spaces', 2);
  });

  uw.on('mongoError', (err) => {
    throw explain(err, 'Could not connect to MongoDB. Is it installed and running?');
  });

  uw.on('redisError', (err) => {
    throw explain(err, 'Could not connect to the Redis server. Is it installed and running?');
  });

  uw.use(announce, {
    // Omit this in a real app: it will auto-generate one for you.
    seed: Buffer.from('8286a5e55c62d93a042b8c56c8face52c05354c288807d941751f0e9060c2ded', 'hex'),
  });

  uw.use(async function configureSources(uw) {
    if (process.env.YOUTUBE_API_KEY) {
      uw.source(ytSource, {
        key: process.env.YOUTUBE_API_KEY,
      });
    }
    uw.source(scSource, {
      key: process.env.SOUNDCLOUD_API_KEY,
    });
  });

  await uw.listen();
  logger.info('Now listening', { port });
}

start().catch((error) => {
  logger.error(error);
  process.exit(1);
});
